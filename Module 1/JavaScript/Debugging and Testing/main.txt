1. Open Chrome DevTools
In Chrome, right-click your page and select Inspect.
Switch to the Console tab to view logs.
Switch to the Network tab to monitor requests.

2. Add console logs in your JS code
Add these logs inside your form submit handler to trace the process:

form.addEventListener("submit", function(e) {
  e.preventDefault();

  console.log("Form submission started");

  const { name, email, event } = form.elements;

  console.log("Form values:", {
    name: name.value,
    email: email.value,
    event: event.value,
  });

  // validation code here...

  if (!valid) {
    console.log("Validation failed");
    return;
  }

  console.log("Validation passed, preparing to send data");

  // fetch call...
  fetch("https://jsonplaceholder.typicode.com/posts", {
    method: "POST",
    body: JSON.stringify({
      name: name.value,
      email: email.value,
      event: event.value,
    }),
    headers: { "Content-Type": "application/json" },
  })
    .then(response => {
      console.log("Fetch response received", response);
      return response.json();
    })
    .then(data => {
      console.log("Fetch data parsed", data);
      // success UI update here
    })
    .catch(error => {
      console.error("Fetch error", error);
      // error UI update here
    });
});



3. Set breakpoints in DevTools
Go to the Sources tab in DevTools.
Open your main.js file.
Click the line number next to the first statement inside the event listener to add a breakpoint.
Trigger the form submit on the webpage.
The debugger will pause there; you can hover over variables to inspect values.

4. Monitor Network requests
While submitting the form, look in the Network tab.
Find the POST request to the mock API.
Check its Request Payload to confirm data sent.
Check Response to see what the server replied.

5. Check for errors or warnings
Console will show any JS errors.
Network will show failed requests.